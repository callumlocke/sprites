require 'active_support'
require 'active_support/core_ext'
require "sprites/version"

require 'forwardable'

class Sprites
  extend ActiveSupport::Autoload

  autoload :Configuration
  autoload :Sprite
  autoload :SpritePieces
  autoload :SpritePiece
  autoload :Stylesheet
  autoload :ChunkyPngGenerator, 'sprites/sprite_generators/chunky_png_generator'

  include Enumerable
  extend Forwardable
  def_delegators :@sprites, :clear, :empty?, :count

  attr_reader :configuration

  def initialize(configuration = Configuration.new)
    @configuration = configuration

    @sprites = Hash.new do |sprites, name|
      sprites[name] = Sprite.new(name, self)
    end
    @loaded = false
  end

  def [](sprite_identifier)
    @sprites[sprite_identifier] if @sprites.has_key?(sprite_identifier)
  end

  def each(&blk)
    @sprites.values.each(&blk)
  end

  # The +sprite+ method adds sprites to the application
  #
  # === Example
  # Sprites.application.define do
  #   sprite :foo
  # end
  #
  # options:
  # => :orientation - sprite orientation
  #       default:  :vertical
  # => :path - path to sprite relative to config.sprites_path
  #       default:  public/images/sprites/{name}.png
  # => :stylesheet_path - path to stylesheet
  #       default:  public/stylesheets/sprites/{name}.css
  # => :url - path to use in background attribute in stylesheet
  #       default:  /images/sprites/{name}.png
  # => :auto_define - whether or not to auto-define the sprite based on directory contents
  #       default: true
  # => :class_prefix - a css string to prepend to all css classes define or autogenerated
  #       examples: '.icon', '.contacts '
  #       default: ''
  #
  def sprite(name, options = {}, &blk)
    sprite = @sprites[name.to_sym]
    sprite.configure(options, &blk)
  end

  def add(sprite)
    @sprites[sprite.name] = sprite
  end

  def loaded?
    @loaded
  end

  def load
    return if loaded?
    if configuration.definition_file
      load_file configuration.definition_file
    elsif configuration.autoload
      autoload
    end
    @loaded = true
  end

  def autoload
    Dir[File.join(configuration.sprite_pieces_path, '*')].each do |sprite_path|
      sprite(File.basename(sprite_path).intern) if File.directory?(sprite_path)
    end
  end

  def load_file(path)
    instance_eval File.read(path), path, 0    
  end

  alias define instance_eval
  public :define

end

require 'sprites/railtie' if defined?(Rails)
